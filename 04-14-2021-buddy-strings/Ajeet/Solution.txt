class Solution {
public:
    bool buddyStrings(string a, string b) {
        if (a.size() != b.size()) {
            return false;
        }
        int p1 = -1;
        bool swap = false, rep = false;
        map<char,int> dict;
        for (int i = 0; i < a.size(); i++) {
            // std::cout << "i: " << i << ", p1: " << p1 << ", swap: " << swap << ", rep: " << rep << std::endl;
            if (a[i] != b[i] && p1 == -1 && swap == false) {
                if (i >= a.size()-1) {
                    return false;
                }
                p1 = i;
            } else if (a[i] != b[i] && p1 != -1 && swap == false) {
                if (a[i] != b[p1] || a[p1] != b[i]) {
                    return false;
                } else {
                    p1 = -1;
                    swap = true;
                }
            } else if (a[i] != b[i] && p1 == -1 && swap == true) {
                return false;
            }
            if (dict.find(a[i]) == dict.end() && rep == false) {
                dict[a[i]] = 1;
            } else {
                rep = true;
            }
        }
        if (rep == false && swap == false || p1 != -1) {
            return false;
        } 
        return true;
    }
};
